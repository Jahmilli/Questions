import java.util.*;

/*
 Divisors of 42 are : 1, 2, 3, 6, 7, 14, 21, 42. These divisors squared are: 1, 4, 9, 36, 49, 196, 441, 1764. The sum of the squared divisors is 2500 which is 50 * 50, a square!

Given two integers m, n (1 <= m <= n) we want to find all integers between m and n whose sum of squared divisors is itself a square. 42 is such a number.

The result will be an array of arrays(in C an array of Pair), each subarray having two elements, first the number whose squared divisors is a square and then the sum of the squared divisors.

#Examples:

list_squared(1, 250) --> [[1, 1], [42, 2500], [246, 84100]]
list_squared(42, 250) --> [[42, 2500], [246, 84100]]
 * 
 */
 class SumSquaredDivisors {
	public static void main(String[] args) {				
		System.out.println(listSquared(1, 250));
	}
	
	public static String listSquared(long m, long n) {
		String divisors = "";
		long counter = m;
		long sum = 0L;
		while(counter <= n) {
			for(int i = 1; i <= counter; i++) {
				if(counter % i == 0) {			
					sum += Math.pow(i, 2);
				System.out.println(counter + "\t" + Math.pow(i, 2) + "\tsum: " + sum);					
				}				
			}
			if((int)Math.sqrt(sum) == Math.sqrt(sum))
				divisors += "[" + counter + ", " + sum + "] ";	
			sum = 0;
			counter++;			
		}
	
		divisors = divisors.trim() + "]";
		divisors = new StringBuilder(divisors).insert(0, "[").toString();		
		return divisors = divisors.replaceAll("] ", "], ");
		
	}
	 
	
}
